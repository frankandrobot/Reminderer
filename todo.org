* Backend classes
** Appointment Interface
*** Examples
**** Dates
Date = 05/01/2012 8pm
 + Just time
   + 8pm - defaults to current day or next day if past 8
   + 8:00pm - default time notation
   + 24 - also supports 24-hour format
   + standard user locale
 + Just date
   + 1 May - defaults to 9am
   + May 1
   + 05/01
   + 05/01/2012 
   + May 1, 2002
   + 1 May 2002
   + standard user locale. Ex: 12/05/01 vs 05/01/12
 + Both
   + all of these combined. Note that some of these might be
     confusing. Ex:
     + 24 May 1 - may 24 @ 1am or May 1 @ midnight?
 + 
**** Appointments
<Task> <<at> <Date>> <every <repeat interval>> 
buy eggs Monday - defaults to 9am
buy eggs Monday 8pm
buy eggs every Monday - defaults to 9am
buy eggs every Monday 8pm
buy eggs next Monday 7pm
buy eggs in 2 weeks
*** MyDate class
Based on built-in Date and Calendar class. Combines them to
allow Date arithmetic
*** Appointment class
This is the main class used for appointments.
**** Variables
    + dayOfWeek = MO, TU, WE, etc
    + date
    + startTime
    + endTime
    + allDay = true, false
    + tags
**** Methods
    + constructor
    + Static createAppointment()
    + usual setters and getters
    + addTags() - adds tags to existing set of tags
    + getStartTime(), getEndTime()
      + if allDay == true then always return startTime =
        12am and endTime = 12pm
*** RepeatingAppointment class
Inherits from the Appointment class. 
**** Variables
    + repeat = WEEKLY, MONTHLY, etc
    + startDate = null or Date
    + endDate = null or Date
**** Methods
    + Static createRepeatingAppointment()
    + usual setters and getters

The only gotcha is deleting a repeating appointment. Does the user
delete all occurrences? all occurrences before given date?
or after a given date?

Deleting all occurrences is the simple case. Just mark that
object for deletion. 

Originally, startDate = date appointment was created and endDate = null. 
If deleting all occurrences after date, set endDate = new date.
If deleting all occureences before date, set startDate = new
date.

*** LocationAppt class
A LocationAppt is "due" whenever the user is near the specified location.
   + tags
   + location
   + radius (in miles)
** Input Interface
  + takes an appointment in "natural" language and returns
    an Appointment object
** MySQLBackEnd class
  + a mySql-lite DB that stores appointments
  + has methods to add/delete/update DB
  + need to make sure that we synchronize access to DB
** ReminderService (Android Service)
  + runs in the background
  + gives notifications when an event is due
** Synchronizer class
  + synchronizes calendars between Dropbox, Google, etc
  + different classes for each service
** LocationService (Android service)
  + runs in background
  + uses GPS to tell you if you are near location of locationAppt
* Frontend
** Android widget
 + allows input
 + shows day's appointments
 + shows appointments due in 1 week
 + customizable
** GUI
 + shows a calendar
 + allows editing of appointments
